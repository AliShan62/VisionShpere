import { useState, useEffect } from "react";
import { GoogleMap, LoadScript, Marker } from "@react-google-maps/api";
import { jsPDF } from "jspdf";
import * as XLSX from "xlsx";

const RealTimePath = () => {
  const [branches] = useState([
    {
      name: "Branch A",
      location: { lat: 31.453963660917783, lng: 74.2990270962974 },
    },
    { name: "Branch B", location: { lat: 31.526, lng: 74.362 } },
    { name: "Branch C", location: { lat: 31.54, lng: 74.38 } },
    { name: "Branch D", location: { lat: 31.49, lng: 74.32 } },
  ]);

  const [employees] = useState([
    {
      name: "Tanveer Hussain",
      branch: "Branch A",
      location: { lat: 31.522, lng: 74.361 },
      accuracy: 90,
      time: "10:30 AM",
      date: "2025-02-12",
    },
    {
      name: "Ali Raza",
      branch: "Branch B",
      location: { lat: 31.518, lng: 74.357 },
      accuracy: 85,
      time: "10:45 AM",
      date: "2025-02-12",
    },
    {
      name: "Usman Khan",
      branch: "Branch A",
      location: { lat: 31.453963660917783, lng: 74.2990270962974 },
      accuracy: 78,
      time: "11:00 AM",
      date: "2025-02-12",
    },
  ]);

  const [selectedBranch, setSelectedBranch] = useState("All");
  const [selectedEmployee, setSelectedEmployee] = useState(employees[0].name);
  const [minAccuracy, setMinAccuracy] = useState(75);
  const [selectedDate, setSelectedDate] = useState("2025-02-12");
  const [showMap, setShowMap] = useState(false);
  const [showList, setShowList] = useState(false);
  const [employeeLocation, setEmployeeLocation] = useState(
    employees[0].location
  );

  useEffect(() => {
    const emp = employees.find((e) => e.name === selectedEmployee);
    if (emp) {
      setEmployeeLocation(emp.location);
    }
  }, [selectedEmployee, employees]);

  const filteredEmployees = employees.filter(
    (emp) =>
      (selectedBranch === "All" || emp.branch === selectedBranch) &&
      emp.accuracy >= minAccuracy &&
      emp.date === selectedDate
  );

  const exportToPDF = () => {
    const emp = employees.find((e) => e.name === selectedEmployee);
    if (!emp) return;

    const doc = new jsPDF();

    // Set Header
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.setTextColor(0, 112, 192);
    doc.text("Employee Location Report", 14, 20);
    doc.setDrawColor(0, 112, 192);
    doc.line(10, 25, 200, 25);

    // Table Headers
    const headers = [
      "Name",
      "Branch",
      "Latitude",
      "Longitude",
      "Accuracy",
      "Time",
      "Date",
    ];
    const data = [
      [
        emp.name,
        emp.branch,
        emp.location.lat,
        emp.location.lng,
        `${emp.accuracy}%`,
        emp.time,
        emp.date,
      ],
    ];

    // Draw Table
    doc.autoTable({
      startY: 30,
      head: [headers],
      body: data,
      theme: "grid",
      styles: { fontSize: 12, cellPadding: 4 },
      headStyles: { fillColor: [0, 112, 192], textColor: 255 },
    });

    // Footer
    doc.setDrawColor(150);
    doc.line(10, 270, 200, 270);
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text("Generated by Real-Time Path System", 75, 280);

    // Save PDF
    doc.save(`Employee_Location_${emp.name}.pdf`);
  };

  const exportToExcel = () => {
    const emp = employees.find((e) => e.name === selectedEmployee);
    if (!emp) return;

    const worksheet = XLSX.utils.json_to_sheet([
      {
        Name: emp.name,
        Branch: emp.branch,
        Latitude: emp.location.lat,
        Longitude: emp.location.lng,
        Accuracy: emp.accuracy,
        Time: emp.time,
        Date: emp.date,
      },
    ]);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Employee");
    XLSX.writeFile(workbook, `Employee_Location_${emp.name}.xlsx`);
  };

  return (
    <div className="flex flex-col items-center pt-20 min-h-screen bg-green-400 p-6">
      <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-5xl">
        <h1 className="text-gray-800 text-3xl font-semibold text-center pb-5">
          Real-Time Path Report
        </h1>

        {/* Filters Section */}
        <div className="mt-4 grid grid-cols-2 gap-4 sm:grid-cols-4">
          <div>
            <label className="text-gray-600 block mb-1">Branch:</label>
            <select
              className="border rounded px-3 py-2 w-full"
              value={selectedBranch}
              onChange={(e) => setSelectedBranch(e.target.value)}
            >
              <option>All</option>
              {branches.map((branch, index) => (
                <option key={index}>{branch.name}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="text-gray-600 block mb-1">Employee:</label>
            <select
              className="border rounded px-3 py-2 w-full"
              value={selectedEmployee}
              onChange={(e) => setSelectedEmployee(e.target.value)}
            >
              {filteredEmployees.map((emp, index) => (
                <option key={index}>{emp.name}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="text-gray-600 block mb-1">Min Accuracy:</label>
            <input
              type="number"
              className="border rounded px-3 py-2 w-full"
              value={minAccuracy}
              onChange={(e) => setMinAccuracy(Number(e.target.value))}
            />
          </div>
          <div>
            <label className="text-gray-600 block mb-1">Date:</label>
            <input
              type="date"
              className="border rounded px-3 py-2 w-full"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
        </div>

        {/* Action Buttons */}
        <div className="mt-6 flex justify-center gap-4">
          <button
            className="bg-green-600 text-white px-6 py-2 rounded-full hover:bg-green-700 transition "
            onClick={() => {
              setShowMap(true);
              setShowList(false);
            }}
          >
            Map View
          </button>
          <button
            className="bg-gray-600 text-white px-6 py-2 rounded-full hover:bg-green-700 transition"
            onClick={() => {
              setShowList(true);
              setShowMap(false);
            }}
          >
            Location List
          </button>
        </div>

        {/* Map View */}
        {showMap && (
          <div className="mt-6" style={{ width: "100%", height: "500px" }}>
            <LoadScript googleMapsApiKey="AIzaSyDuFmXH6wlIW4tzu7q9fyEK-_Gj_xE7nKE">
              <GoogleMap
                mapContainerStyle={{ width: "100%", height: "100%" }}
                center={employeeLocation}
                zoom={12}
                options={{ disableDefaultUI: true, zoomControl: true }}
              >
                <Marker
                  position={employeeLocation}
                  title={`${selectedEmployee}'s Location`}
                />
              </GoogleMap>
            </LoadScript>
          </div>
        )}

        {/* Location List View */}
        {showList && (
          <div className="mt-6 flex justify-end space-x-3">
            <button
              className="bg-red-500 text-white px-6 py-2 rounded-full hover:bg-red-700 transition"
              onClick={exportToPDF}
            >
              PDF
            </button>
            <button
              className="bg-green-500 text-white px-6 py-2 rounded-full hover:bg-green-700 transition"
              onClick={exportToExcel}
            >
              Excel
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default RealTimePath;
